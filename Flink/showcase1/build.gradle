buildscript {
    repositories {
        mavenLocal()
        maven {url "http://120.25.156.197:8081/nexus/content/groups/public/"}
        maven {
            /*
            credentials {
                username 'aaron'
                password 'aaron123'
            }*/
            url "http://192.168.1.112:8081/nexus/content/groups/public/"
        }
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
            name = "Alibaba maven库"
        }
        jcenter() // this applies only to the Gradle 'Shadow' plugin
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}
plugins {
    id 'java'
    id 'application'
    // shadow plugin to produce fat JARs
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

group 'com.aaron'
version '1.0.0-SNAPSHOT'
mainClassName = 'com.aaron.flink.SocketWindowWordCount'
description = """Flink Quickstart Job"""

ext {
    javaVersion = '1.8'
    flinkVersion = '1.8.0'
    scalaBinaryVersion = '2.11'
    slf4jVersion = '1.7.7'
    log4jVersion = '1.2.17'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configuration=log4j.properties"]

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

// declare where to find the dependencies of your project
repositories {
    mavenLocal()
    maven {url "http://120.25.156.197:8081/nexus/content/groups/public/"}
    maven {
        /*
        credentials {
            username 'aaron'
            password 'aaron123'
        }*/
        url "http://192.168.1.112:8081/nexus/content/groups/public/"
    }
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
        name = "Alibaba maven库"
    }
    jcenter() // this applies only to the Gradle 'Shadow' plugin
    maven { url "https://repository.apache.org/content/repositories/snapshots/" }
    mavenCentral()
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'log4j'
}

dependencies {
    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    compile "org.apache.flink:flink-java:${flinkVersion}"
    compile "org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"

    // --------------------------------------------------------------
    // Dependencies that should be part of the shadow jar, e.g.
    // connectors. These must be in the flinkShadowJar configuration!
    // --------------------------------------------------------------
    //flinkShadowJar "org.apache.flink:flink-connector-kafka-0.11_${scalaBinaryVersion}:${flinkVersion}"

    compile "log4j:log4j:${log4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Main-Class': 'com.aaron.flink.SocketWindowWordCount'
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}
